// Script to create a background showing polar coordinates
// The following variables may be set:
//
//    * frameWidth - an integer giving the width of the background image
//                   that will be created. The default is 1920. The value
//                   is ignored if the animation was created by another
//                   script. If undefined or null, the default will be used.
//    * frameHeight - an integer giving the height of the background image
//                    that will be created. The default is 1080. The value
//                    is ignored if the animation was created by another
//                    script. If undefined or null, the default will be used.
//    * userdist - a double giving a reference distance in user space. The
//                 default is 1.0. The ratio userdist/gcsdist is the
//                 scaling factor for converting distances in graph coordinate
//                 space to user space. if undefined or null, the default
//                 will be used.
//    * gcsdist -  a double giving a reference distance in graph coordinate
//                 space. The default is 1.0. The ratio userdist/gcsdist is the
//                 scaling factor for converting distances in graph coordinate
//                 space to user space. If undefined or null, the default will
//                 be used.
//    * xorigin - a double giving the X coordinate in graph coordinate space
//                for a reference point in the frame. The default is 0.0.
//                The value is ignored if the animation was created by
//                another script. if undefined or null, the default will be
//                used.
//    * yorigin - a double giving the Y coordinate in graph coordinate space
//                for a reference point in the frame. The  default is 0.0.
//                The value is ignored if the animation was created by
//                another script. If undefined or null, the default will be
//                used.
//    * xfract - a double giving the fraction of the frame width at which
//               the reference point appears (0.0 is the left edge and 1.0
//               is the right edge). The default is 0.0. The value is
//               ignored if the animation was created by another script.
//               If undefined or null, the default will be used.
//    * yfract - a double giving the fraction of the frame height at which
//               the reference point appears (0.0 is the lower edge and 1.0
//               is the upper edge). The default is 0.0. The value is
//               ignored if the animation was created by another script.
//               If undefined or null, the default will be used.
//   *  fractional - true if the grid origin's coordinates
//                   (gridXOrigin, gridYOrigin) are a fraction of the
//                   position in the frame (excluding offsets); false
//                   if absolute values in graph coordinate space are
//                   used. If undefined or null, a default will be used.
//    * gridXOrigin - a double giving the X component of the grid's
//                    origin.  When fractional is true, the value is
//                    a fraction of the position in the frame, excluding
//                    offsets, in the X direction. When false, it is the
//                    X coordinate of the origin for a polar coordinate
//                    grid, given in graph-coordinate-space units. If
//                    undefined or null, a default value will be used.
//    * gridXOrigin - a double giving the Y component of the grid's
//                    origin.  When fractional is true, the value is
//                    a fraction of the position in the frame, excluding
//                    offsets, in the Y direction. When false, it is the
//                    Y coordinate of the origin for a polar coordinate
//                    grid, given in graph-coordinate-space units. If
//                    undefined or null, a default value will be used.
//    * radialSpacing - a double giving the radial spacing for concentric
//                      circles; null, undefined, 0.0 or negative for a default.
//    * angularSpacing  - the angular spacing in degrees for radial lines.
//                        The value should be a divisor of 90 degrees or
//                        either null or undefined for a default.
//    * gridColor - the grid-line color provided as a CSS string,
//                  undefined or null for the default.
//    * strokeWidth - a double giving the width of the stroke used to create
//                    grid lines; undefined or null for a default.
//    * gridZorder - an integer giving the z-order to use for the object
//                   that creates the grid. The default is the javascript
//                   value java.lang.Long.MAX_VALUE (2^53 - 1).

import(org.bzdev.anim2d, [Animation2D,
			  AnimationLayer2DFactory,
			  PolarGridFactory]);
import (java.lang, [Math, Long, Number]);
import (org.bzdev.epts.ScriptingEnv.EPTSInfo);

var epts;
var a2d ?= null;

var frameWidth ??= (a2d == null)?
    (!var.epts || epts == null)? 1920: epts.getWidth():
    a2d.getWidthAsInt();

var frameHeight ??= (a2d == null)?
    (!var.epts || epts == null)? 1080: epts.getHeight():
    a2d.getHeightAsInt();

var userdist ??= (!var.epts || epts == null || !epts.hasDistances())?
    1.0: epts.getUserDist();

var gcsdist ??= (!var.epts || epts == null || !epts.hasDistances())?
    1.0:
    epts.getGCSDist();

var xorigin ??=  (!var.epts || epts == null || !epts.hasDistances())?
    0.0: epts.getXOrigin();

var yorigin ??= (!var.epts || epts == null || !epts.hasDistances())?
    0.0: epts.getYOrigin();

var xfract ??= (!var.epts || epts == null || !epts.hasDistances())?
    0.0: epts.getXFract();

var yfract ??= (!var.epts || epts == null || !epts.hasDistances())?
    0.0: epts.getYFract();

var fractional ??= true;
(fractional != true && fractional != false)
    &&  throw "The variable 'fractional' is not a boolean";

var gridXOrigin ??= fractional? 0.5: 0.0;

var gridYOrigin ??= fractional? 0.5: 0.0;

var gridZorder ??= Long.MAX_VALUE;

var radialSpacing ?= null;

var angularSpacing ?= null;

var strokeWidth ?= null;

var gridColor ?= null;

function() {
    // use a lambda expression to avoid adding more variables.
    var a2dtest = (a2d == null);
    var plainBackground = (a2dtest && (!var.epts || epts == null));
    var scalef = a2dtest?
	function() {
	    var sf = userdist/gcsdist;
	    a2d = new Animation2D(scripting, frameWidth, frameHeight,
				  1000.0, 40);
	    a2d.setRanges(xorigin, yorigin, xfract, yfract, sf, sf);
	    sf
	}():
	(a2d.getWidth() - a2d.getXLowerOffset() -  a2d.getXUpperOffset())
	    / (a2d.getXUpper() - a2d.getXLower());

    plainBackground? function() {
	var xlower = a2d.getXLower();
	var xupper = a2d.getXUpper();
	var ylower = a2d.getYLower();
	var yupper = a2d.getYUpper();
	var alf = new AnimationLayer2DFactory(a2d);
	var spec = [
	    {zorder: gridZorder, visible: true},
	    {withPrefix: "object",
	     withIndex: [{type: "RECTANGLE", x: xlower, y: ylower,
			  refPoint: "LOWER_LEFT",
			  width: (xupper-xlower),
			  height: (yupper-ylower),
			  fill: true, draw: true,
			  "stroke.width": 1.0,
			  "fillColor.css": "white",
			  "drawColor.css": "white"}]}];
	alf.configure(spec);
	alf.createObject();
	void
    }(): void;

    var spec = [{zorder: gridZorder, visible: true,
		 fractional: fractional,
		 xo: gridXOrigin, yo: gridYOrigin}];

    (angularSpacing != null)? spec.add({"angularSpacing": angularSpacing}):
	false;

    (radialSpacing != null)? spec.add({"radialSpacing": radialSpacing}): false;

    (strokeWidth != null)? spec.add({"strokeWidth": strokeWidth}): false;

    (gridColor != null)? spec.add({"color.css": gridColor}): false;

    var gridf = new PolarGridFactory(a2d);
    gridf.configure(spec);
    gridf.createObject();
    void
}()
