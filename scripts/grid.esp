// Script to create a background consisting of a grid
// used to located points in graph coordinate space.
// The following variables may be set:
//
//    * frameWidth - an integer giving the width of the background image
//                   that will be created. The default is 1920. The value
//                   is ignored if the animation was created by another
//                   script. If undefined or null, the default will be used.
//    * frameHeight - an integer giving the height of the background image
//                    that will be created. The default is 1080. The value
//                   is ignored if the animation was created by another
//                   script. If undefined or null, the default will be used.
//    * userdist - a double giving a reference distance in user space. The
//                 default is 1.0. The ratio userdist/gcsdist is the
//                 scaling factor for converting distances in graph coordinate
//                 space to user space. The value is ignored if the
//                 animation was created by another script. If undefined or
//                 null, the default will be used.
//    * gcsdist -  a double giving a reference distance in graph coordinate
//                 space. The default is 1.0. The ratio userdist/gcsdist is the
//                 scaling factor for converting distances in graph coordinate
//                 space to user space. The value is ignored if the
//                 animation was created by another script.
//    * xorigin - a double giving the X coordinate in graph coordinate space
//                for the frame's reference point. The default is 0.0.
//                The value is ignored if the animation was created by
//                another script.  If undefined or null, the default will
//                 be used.
//    * yorigin - a double giving the Y coordinate in graph coordinate space
//                for the frame's reference point. The  default is 0.0.
//                The value is ignored if the animation was created by
//                another script. If undefined or null, the default will
//                 be used.
//    * xfract - a double giving the fraction of the frame width at which
//               the reference point appears (0.0 is the left edge and 1.0
//               is the right edge). The default is 0.0. The value is
//               ignored if the animation was created by another script.
//               If undefined or null, the default will be used.
//    * yfract - a double giving the fraction of the frame height at which
//               the reference point appears (0.0 is the lower edge and 1.0
//               is the upper edge). The default is 0.0. The value is
//               ignored if the animation was created by another script.
//               If undefined or null, the default will be used.
//    * spacing - a double giving the grid spacing in graph-coordinate
//                space units. If not provided explicitly or if the
//                value is null, 0.0, or negative, the default is computed by
//                taking the minimum of the frame width and frame height,
//                converting that minimum to graph coordinate space units,
//                then dividing by 10, and finally finding the largest
//                power of 10 that is not larger than this value. The
//                grid lines will appear at X or Y coordinates that are
//                an integral multiple of the spacing.
//    * subspacing - the number of subspacings per spacing for a finer grid.
//                   if undefined, null or 1, the value is ignored. In practice,
//                   values that create a subgrid are either 2, 4, 5, or 10.
//                   The value must be an integer. If undefined or null,
//                   a default value is used.
//    * axisColor - the axis color provided as a CSS string,
//                  null or undefined for the default.
//    * spacingColor - the spacing color provided as a CSS string,
//                     null or undefined for the default.
//    * subspacingColor - the subspacing color provided as a CSS string,
//                        null or undefined for the default.
//    * strokeWidth - a double giving the width of the stroke used to create
//                    grid lines; undefined or null for a default.
//    * gridZorder - an integer giving the z-order to use for the object
//                   that creates the grid. The default is the javascript
//                   value java.lang.Long.MAX_VALUE (2^53 - 1).
//
// The variable a2d is expected to be the variable name for an
// animation. The animation is expected to be configured: in
// particular its setRanges method must have been called.  It will be
// created if it does not already exist or is null, but an existing
// one can be used as well so that a grid can be overlayed.
// Generally, if provided, the axisColor should be more prominent than
// the spacing color, which in turn should be more prominent than the
// subspacing color.

import(org.bzdev.anim2d, [Animation2D,
			  AnimationLayer2DFactory,
			  CartesianGrid2DFactory]);
import (java.lang, [Math, Long, Number]);
import (org.bzdev.epts.ScriptingEnv.EPTSInfo);

var epts;
var a2d ?= null;

var subspacing ??= 1;

(!(subspacing instanceof Number) || (subspacing != Math.round(subspacing))
 || (subspacing < 0)) && throw "subspacing = " + subspacing;

subspacing = (subspacing == 0)? 1: subspacing;

var frameWidth ??= (a2d == null)?
    (!var.epts || epts == null)? 1920: epts.getWidth():
    a2d.getWidthAsInt();

var frameHeight ??= (a2d == null)?
    (!var.epts || epts == null)? 1080: epts.getHeight():
    a2d.getHeightAsInt();

var userdist ??= (!var.epts || epts == null || !epts.hasDistances())? 1.0:
    epts.getUserDist();

var gcsdist ??= (!var.epts || epts == null)? 1.0: epts.getGCSDist();

var xorigin ??= (!var.epts || epts == null)? 0.0: epts.getXOrigin();

var yorigin ??= (!var.epts || epts == null)? 0.0: epts.getYOrigin();

var xfract ??= (!var.epts || epts == null)? 0.0: epts.getXFract();

var yfract ??= (!var.epts || epts == null)? 0.0: epts.getYFract();

var spacing ?= null;

var gridZorder ??= Long.MAX_VALUE;

var axisColor ?= null;

var spacingColor ?= null;

var subspacingColor ?= null;

var strokeWidth ?= null;


function() {
    var a2dtest = (a2d == null);
    var plainBackground = (a2dtest && (!var.epts || epts == null));
    var scalef = a2dtest?
	function() {
	    var sf = userdist/gcsdist;
	    a2d = new Animation2D(scripting, frameWidth, frameHeight,
				  1000.0, 40);
	    a2d.setRanges(xorigin, yorigin, xfract, yfract, sf, sf);
	    sf
	}():
	(a2d.getWidth() - a2d.getXLowerOffset() -  a2d.getXUpperOffset())
	    / (a2d.getXUpper() - a2d.getXLower());

    spacing = (spacing == null)?
	function() {
	    // By default, arrange so that there are roughly 10 lines
	    // in the shortest direction, with the constraint that the
	    // graph coordinate space values are powers of 10 in graph
	    // coordinate space
	    var s = ((frameWidth > frameHeight)? frameHeight: frameWidth)
		/ scalef;
	    s = Math.floor(Math.log10(s/10));
	    (s > -0.1)?
		Math.round(Math.pow(10.0, ((s < 0.0)? 0.0: s))):
		1.0 / Math.round(Math.pow(10.0, s))
	}(): spacing;

    plainBackground? function() {
	var xlower = a2d.getXLower();
	var xupper = a2d.getXUpper();
	var ylower = a2d.getYLower();
	var yupper = a2d.getYUpper();
	var alf = new AnimationLayer2DFactory(a2d);
	var spec = [
	    {zorder: gridZorder, visible: true},
	    {withPrefix: "object",
	     withIndex: [{type: "RECTANGLE", x: xlower, y: ylower,
			  refPoint: "LOWER_LEFT",
			  width: (xupper-xlower),
			  height: (yupper-ylower),
			  fill: true, draw: true,
			  "stroke.width": 1.0,
			  "fillColor.css": "white",
			  "drawColor.css": "white"}]}];
	alf.configure(spec);
	alf.createObject();
	void
    }(): void;

    var gridf = new CartesianGrid2DFactory(a2d);

    var spec = [{zorder: gridZorder, visible: true},
	    {spacing: spacing, subspacing: subspacing}];

    (axisColor != null)? spec.add({"spacingColor.css": spacingColor}): false;

    (spacingColor != null)? spec.add({"spacingColor.css": spacingColor}): false;

    (subspacingColor != null)?
	spec.add({"subspacingColor.css": subspacingColor}):false;

    (strokeWidth != null)?  spec.add({"strokeWidth": strokeWidth}): false;

    gridf.configure(spec);
    gridf.createObject();
    void
}();
