.TH EPTS "5" "May 2018" "epts VERSION" "File Formats and Conversions"
.SH NAME
epts \- epts file format
.SH DESCRIPTION
The program
.B epts
allows its state to be saved in XML files with the file extension
.B epts
and a session configuration is a ZIP files with the file extension
.BR eptc .
The saved-state files describe a background, how to set up a
coordinate system in application-specific units, the codebases needed
to run scripts, the scripting-language use any specific image used to
generate a background, scripting-language variables that must be
provided, and the points and paths are placed over the background.
The session configuration files provides parameters needed to
configure a saved-state file, and any options that might have to be
passed to the
.B java
command used to start the Java Virtual Machine (these options, when
present, will typically be ones needed to configure the JVM so that
it has more memory available to it).
.PP
EPTS also makes use of template files. There are some general
guidelines for the syntax of these files.
.SH SAVED-STATE FILES
.B epts
file starts with the following lines:
.IP
.B
<?xml version="1.1" encoding="UTF-8"?>
.br
.B
<!DOCTYPE\ images\ PUBLIC\ "-//BZDev//EPTS-1.0//EN"
.br
.B
\ \ \ \ \ \ \ \ \ \ "sresource:epts-1.0.dtd">
.br
.B
<epts xmlns="http://bzdev.org/DTD/epts-1.0">
.PP
This is followed by an "image" element:
.IP
.B
<image width="\fIWIDTH\fB" height="\fIHEIGHT\fB" imageURIExists="\fIVALUE\fB"\>
.PP
where
.I WIDTH
is the image width,
.I HEIGHT
is the image height,
and
.I VALUE
is
.B true
if an image file is specified, and
.B false
if not. When an image file is specified, the
.B width
and
.B height
fields for this element are those of the image. When the
.B imageURIExists
field is
.BR true ,
the image URI will be provided in the following
.B targetList
element described below and the specified dimensions are expected to
match those of the image (this allows a crosscheck to verify that the
image dimensions have not changed due to an update as the image itself is not
part of this file).
.PP
After the
.B image
element there is an optional
.B codebase
element with no attributes. Instead, it contains a sequence of 0 or more
.B path
elements, each on of which contains a URL or file name as specified in the
.B --codebase
option described in
.B epts\  (1).
The
.B path
elements do not have any attributes and their contents are text (XML
PCDATA). Characters such as
.B <
and
.B >
must be replaced with entities (\fB&lt;\fR and \fB&gt;\fR respectively).
.PP
After the
.B image
element and any optional
.B codebase
element, there is an an optional
.B modules
element. This element does not have any attributes. Its contents are
a sequence of 0 or more
.B module
elements, which also has no attributes. The contents of a
.B module
element is a module name.
.PP
After the
.B image
element and any optional
.B codebase
and
.B modules
elements, there is an an optional
.B classpath
element. This element does not have any attributes. Its contents are
a sequence of
.B path
elements as described above.
.PP
After the
.B image
element and any optional
.BR codebase ,
.BR modules ,
and
.B classpath
elements, there is an an optional
.B scripting
element, whose attributes are
.B language
and
.BR animation .
The
.B language
element provides the standard name for a scripting language (e.g.,
.BR ECMAScript ),
and the
.B animation
element provides the name of a scripting-language variable that will
be bound to an instance of
.BR org.bzdev.anim2d.Animation2D .
.PP
The next element, which is also optional, is the
.B targetList
element and it does not have any attributes, using a sequence of
.B argument
elements instead:
.IP
.B
<targetList>
.br
.B
\ \ \ \ <argument>\fICDATA\fB</argument> ...
.br
.B </targetList>
.PP
where
.I CDATA
is an XML character sequence. Predefined entities must be used
to quote characters reserved by XML. Any other entity reference must
not be used. For the case where the preceding
.B image
element specified
.B true
for its
.B imageURIExists
attribute\'s value, there is a single argument that represents the URI
for the image. When this URI is an relative URI, it must refer to a
subdirectory of the directory in which the EPTS file is located, or
that directory itself.
.PP
The target-list is followed by a
.B gcsconfig
element:
.IP
.B
<gcsconfig unitIndex="\fIIND1\B" refPointIndex="\fIIND2\fB"
.br
\ \ \ \ \ \ \ userSpaceDistance="\fIUDIST\fB"
.br
\ \ \ \ \ \ \ gcsDistance="\fIGCSDIST\fB"
.br
\ \ \ \ \ \ \ xrefpointGCS="\fIXORIGIN\fB" yrefpointGCS="\fIYORIGIN\fB"/>
.PP
where
.I IND1
has values in the range [0, 10] corresponding to "custom units", "nm",
"um", "mm", "cm", "m", "km","inches", "feet", "yards", and "miles"
respectively.  Similarly,
.I IND2
has values in the range [0, 8] corresponding to "UPPER_LEFT",
"UPPER_CENTER", "UPPER_RIGHT", "CENTER_LEFT", "CENTER",
"CENTER_RIGHT", "LOWER_LEFT", "LOWER_CENTER", and "LOWER_RIGHT"
respectively. The value
.I UDIST
is a distance in image-space (or user space) coordinates and
.I GCSDIST
is the corresponding distance in graph coordinate space, using the units
corresponding to the value of
.IR IND1 .
Unless specified in custom units or meters, the
.I GCSDIST
value will be converted to meters before it is used.
The values for
.I XORIGIN
and
.I YORIGIN
are the X-Y coordinates of the image\'s reference point
in graph coordinate space units (custom units if
.I IND1
is 0; otherwise meters), so no unit conversion is used for these
quantities.
.PP
The next element is a
.B table
element, which does not specify any attributes, but contains a sequence
of
.B row
elements:
.IP
.B
<table>
.br
.B
\ \ \ <row varname="\fINAME\fB" type="\fITYPE\fB"
.br
.B
\ \ \ \ \ \ \ \ x="X" y="Y" xp="XP" yp="YP"/>
.br
.B
</table>
.PP
where there can be 0 or more rows. The value of TYPE can be
.BR LOCATION ,
.BR PATH_START ,
.BR MOVE_TO ,
.BR SPLINE ,
.BR CONTROL ,
.BR SEG_END ,
.BR CLOSE ,
or
.BR PATH_END .
The value of
.I NAME
is an empty string unless the value of
.I TYPE
is
.B LOCATION
or
.BR PATH_START ,
in which case
.I NAME
should be a variable name acceptable for use in a programming language
(e.g., Java or ECMAScript). For the type
.BR LOCATION ,
.BR MOVE_TO ,
.BR SPLINE ,
.BR CONTROL ,
or
.BR SEG_END ,
the values
.I X
and
.I Y
must be the coordinates of a corresponding point in graph-coordinate-space
units, and XP and YP must be the corresponding coordinates in image-space
units, measured from the lower-left corner of the image so that X values
go from left to right and Y values go from bottom to top.
.PP
The table element is followed by an optional
.B filters
element, which contains a possibly empty sequence of
.B filter
elements:
.IP
.B
<filters>
.br
\ \ <filter name="\fINAME\fB" mode="\fIMODE\fB">
.br
\ \ \ \ <filterRow varname="\fIVNAME\fB" mode="\fIMODE\fB"/>
.br
\ \ \ \ ...
.br
\ \ </filter>
.br
</filters>\fR
.br
.PP
where
.I NAME
is the name of a path,
.I MODE
is either
.BR DEFAULT ,
.BR SELECTABLE ,
.BR DRAWABLE ,
or
.BR INVISIBLE ,
and
.I VNAME
is the name of a location or path.
.PP
For a
.B filter
element, the mode
.B DEFAULT
indicates no change for locations and paths,
.B SELECTABLE
indicates that locations and paths will be displayed with their
control points,
.B DRAWABLE
indicates that paths will be displayed without their control points (
so that the control points cannot be selected), and
.B INVISIBLE
indicates that paths and locations are not shown.
.PP
For a
.B filterRow
element, the
.B mode
value
.B DEFAULT
indicates no change whether the corresponding location or path is
visible, or selectable,
.B SELECTABLE
indicates that the corresponding location or path will be displayed showing
control points,
.B DRAWABLE
indicates that the corresponding path will be displayed without its
control points (so that the control points cannot be selected), and
.B INVISIBLE
indicates that the corresponding location or path will not be displayed.
.PP
After the
.B table
element, and an optional
.B filters
element, there is an optional
.B offsets
element.  The
.B offsets
element contains an optional
.B basemap
element followed by an optional
.B pathmap
element. If a
.B pathmap
element is present, it must be preceded by a
.B basemap
element.  Neither the
.B basemap
nor the
.B pathmap
elements have any attributes.
.PP
The
.B basemap
element contains a sequence of
.B basemapEntry
elements. These do not contain any other elements, but do have some
attributes.
.IP
The attribute
.B base
This field provides a string naming the base or reference path for an
offset path.
.IP
.B mindex
An integer code indicating how an offset path is to be generated.
There are five codes.
.B 0
indicates that the generated path is a closed path with its distance
from the reference path specified by
.B dist1
and
.BR dist2 .
.B 1
indicates that the generated path is an open path on the
counterclockwise side of the reference path with is distance
from the reference path specified by
.BR dist3 .
The corresponding tangent vectors are parallel to each other.
.B 2
indicates that the generated path is an open path on the
counterclockwise side of the reference path with is distance
from the reference path specified by
.BR dist3 .
The corresponding tangent vectors are antiparallel to each other.
.B 3
indicates that the generated path is an open path on the
clockwise side of the reference path with is distance
from the reference path specified by
.BR dist3 .
The corresponding tangent vectors are parallel to each other.
.B 4
indicates that the generated path is an open path on the
clockwise side of the reference path with is distance
from the reference path specified by
.BR dist3 .
The corresponding tangent vectors are antiparallel to each other.  In
all cases, clockwise and counterclockwise indicate that a point on the
generated path is on the left or right side of the corresponding point
on the reference path respectively, measured from the direction of the
tangent vector at that point.
.IP
The attribute
.B dist1
specifies the distance from the reference path in the counterclockwise
direction to an offset curve that contains segments on both sides
of the reference path.
.IP
The attribute
.B dist2
specifies the distance from the reference path in the clockwise
direction to an offset curve that contains segments on both sides
of the reference path.
.IP
The attribute
.B dist3
specifies the distance from the reference path to a single offset
path.
.IP
The attribute
.B uindex1
specifies the units for the attribute
.BR dist1 .
.IP
The attribute
.B uindex2
specifies the units for the attribute
.BR dist2 .
.IP
The attribute
.B uindex3
specifies the units for the attribute
.BR dist1 .
.PP
The attributes uindex1, uindex2, and uindex3 encode units as follows:
.B 0
indicates that distances are in custom units.
.B 1
indicates that distances are in nanometers (nm).
.B 2
indicates that distances are in micrometers (um).
.B 3
indicates that distances are in millimeters (mm).
.B 4
indicates that distances are in centimeters (cm).
.B 5
indicates that distances are in meters (m).
.B 5
indicates that distances are in kilometers (km)l
.B 7
indicates that distances are in inches.
.B 8
indicates that distances are in feet.
.B 9
indicates that distances are in yards
.B 10
indicates that distances are in miles.
.PP
Finally, the file ends by closing the
.B epts
element as required for a valid XML file:
.IP
.B </epts>

.SH TEMPLATE SYNTAX
Templates specify an output format for points and paths using the
syntax specified by the Java
class
.BR org.bzdev.util.TemplateProcessor .
Instances of this class are constructed using a tree consisting of
objects whose type is
.B org.bzdev.util.TemplateProcessor.KeyMap
or
.BR org.bzdev.util.TemplateProcessor.KeyMapList .
This tree determines the directives a give template processor supports
and how those directives are used. Each value corresponding to a key
is either a string (\fBjava.lang.String\fR), a
.BR KeyMap ,
an array of
.BR KeyMap , or a
.BR KeyMapList .
The keys name directives. When a key\'s value is a string, the
directive is a simple directive.  Otherwise it is an iterative
directive. When the value of an iterative directive is a single
.BR KeyMap ,
the iteration occurs once and this can be used a conditional (provided
when the directive is defined and missing when it is not defined).
.PP
A template contains a mixture of text and directives stored in a text
file. In a template, directives start with the sequence "$(" and end
with a closing ")".  A simple directive contains a variable name and
its value is a string that provides text that will be substituted for
the directive.  For example, the directive "$(varname)" will be
replaced by a string containing a variable name.  The directive "$$"
is replaced with a single dollar sign.  An iterative directive
consists of a name, a colon (":") and a second name. Its value is
either a key map (in which case it is treated like a list with a
single value, or a list or array providing key maps over which one
iterates). A following simple directive containing the second name
will then end the iterative block.
.PP
Directives can be globally defined or can be scoped to apply only
within an iterative block.  When blocks are nested and a directive is
defined at multiple levels, the most recent definition is used.
In the following description, we will frequently refer to a directive
by the name of its key.

.SH TABLE TEMPLATE FORMAT
EPTS can generate text files, describing all paths and locations
stored in EPTS\'s table, based on a template.
.PP
For a table template, EPTS defines several global directive.
The global directives
.B hasPackage
and
.B hasClass are iterative directives that are either missing or that
iterate over an empty key map. These are used to determine if the
directives
.B package
and
.B class
are present respectively. Both provide a single iteration with an
empty key map.  As a result, the only directives that are available are
the global directives
.B class
and
.BR package :
.TP
.B class
is the simple name of a Java class, and can be used by templates
that create Java class definitions.
.TP
.B package
is the fully qualified name of a Java package and can be used by
templates that create Java class definitions.
.TP
.B public
will either be undefined (in which case it will be expanded to an empty
string) or it will expand to the value
.BR public .
.TP
.B optSpace
will either be undefined (in which case it will be expanded to an empty
string) or it will expand to a single space.
.PP
The global directive
.B items
is an iterative directive that iterates over a list, each element of
which contains the following directives:
.TP
.B varname
This is a simple directive defining a variable name associated with a
location or path.
.TP
.B index
This directive provides an overall index. Its value is incremented for
each line in the table.
.TP
.B vindex
This directive provides a variable-name index. This value is
incremented whenever a variable name changes.
.TP
.B location
This is an iterative directive that defines a specific, isolated
point. While iterative, each definition contains only a single
point. Both
.B location
and
.B pathStatement
will not both be present at a specific iteration, although one of the
two will be present.
.TP
.B pathStatement
This is an iterative directive that defines the control points for a
path. While iterative, each pathSegment definition contains a single
key map as its value. Both
.B location
and
.B pathStatement
will not both be present at a specific iteration, although one of the
two will be present.
.PP
While
.B location
is an iterative directive, it acts as if there was a single
iteration. During this iteration, the following directives are defined:
.TP
.B x
This directive provides the X coordinate of the point in graph
coordinate space.
.TP
.BR y
This directive provides the Y coordinate of the point in graph
coordinate space.
.TP
.BR xp
This directive provides the X coordinate of the point in image space
measured from left to right (the standard Java convention).
.TP
.BR yp
This directive provides the Y coordinate of the point in image space,
measured from top to bottom (the standard Java convention).
.TP
.BR ypr
This directive provides the Y coordinate of the point in image space
measured from bottom to top (the reverse of the standard Java convention,
instead matching the convention used in mathematics).
.PP
Similarly, the value for
.B pathStatement
is a key map containing the following directives:
.TP
.B draw
This directive has the value
.B true or
.BR false .
When true, a path\'s outline will be drawn. Otherwise, the
path\'s outline will not be drawn.
.TP
.B fill
This directive has the value
.B true or
.BR false .
When true, a path\'s outline will be filled. Otherwise, the
path\'s outline will not be filled.
.TP
.B hasAttributes
This is an iterative directive
which will provide at most a single iteration. When present (i.e.,
when the iteration count is 1), the directives
.B draw
and/or
.B fill
will have the value
.BR true ,
and attributes defining colors or strokes will exist.
.TP
.B hasDashIncrement
This is an iterative directive containing a single iteration. When
present, one may use the
.B dashIncrement
directive, whose value is the length of a "\-" or "\ " in a dash
pattern.  The units are GCS units when
.B gcsMode is
.B true
and user-space units when
.B gcsMode is
.B  false
or not defined.
.TP
.B hasDashPattern
This is an iterative directive containing a single iteration. When
present, one may use the
.B dashPattern
directive, whose value is a string consisting of "\-" and "&\ " characters,
starting with a "\-". A sequence of
.I N
"\-" or <EM>N</EM> "\ " denotes a dash or gap whose length is
.I N
multiplied by the dash increment. The pattern created will be periodic.
.TP
.B hasDashPhase
This is an iterative directive containing a single iteration. When
present, one may use the
.B dashPhase
directive, whose values is the offset at which the dash/gap pattern
starts.  The units are GCS units when
.B gcsMode is
.B true
and user-space units when
.B gcsMode is
.B  false
or not defined.
.TP
.B hasDrawColor
This is an iterative directive containing a single iteration. When
present, one may use the
.B drawColor
directive, whose value is a CSS color specification that
indicates the color used when drawing paths.
.TP
.B hasFillColor
This is an iterative directive containing a single iteration. When
present, one may use the
.B fillColor
directive, whose value is a CSS color specification that
indicates the color used when filling paths.
.TP
.B hasGcsMode
This is an iterative directive containing a single iteration. When
present, one may use the
.B gcsMode
directive, whose value is
.B true
if    strokes are defined using GCS units, or
.B false
if strokes are defined using user space or image space units.
.TP
.B hasMiterLimit
This is an iterative directive containing a single iteration. When
present, one may use the
.B miterLimit
directive, whose value is the "limit to trim a line join that has a
JOIN_MITER decoration. A line join is trimmed when the ratio of miter
length to stroke width is greater than the miter-limit value. The miter
length is the diagonal length of the miter, which is the distance
between the inside corner and the outside corner of the
intersection. The smaller the angle formed by two line segments, the
longer the miter length and the sharper the angle of intersection. The
default miter-limit value of 10.0f causes all angles less than 11
degrees to be trimmed. Trimming miters converts the decoration of the
line join to bevel." (The quote is from the Java API documentation
for the class
.BR java.awt.BasicStroke .)
The units are GCS units when
.B gcsMode is
.B true
and user-space units when
.B gcsMode is
.B  false
or not defined.
When present, the minimum allowed value for the miter limit is 1.0.
.TP
.B hasStrokeCap
This is an iterative directive containing a single iteration. When
present, one may use the
.B strokeCap
directive, whose value is either
.BR BUTT ,
.BR ROUND ,
or
.BR SQUARE .
The values defines the type of decoration at the end of a line as
described in the documentation for the Java enumeration type
.BR org.bzdev.obnaming.misc.BasicStrokeParm.Cap .
.TP
.B hasStrokeJoin
This is an iterative directive containing a single iteration. When
present, one may use the
.B strokeJoin
directive, whose value is either
.BR BEVEL ,
.BR MITER , or
.BR ROUND.
These values define how line segments are joined as described in the
documentation for the Java enumeration type
.BR org.bzdev.obnaming.misc.BasicStrokeParm.Join .
.TP
.B hasStrokeWidth
This is an iterative directive containing a single iteration. When
present, one may use the
.B strokeWidth
directive, whose value is the width of a stroke used to draw a
path. The units are GCS units when
.B gcsMode is
.B true
and user-space units when
.B gcsMode is
.B  false
or not defined.
.TP
.BR hasWindingRule
This is an iterative directive containing a single iteration. When
present, one may use the
.B windingRule
directive, whose values are
.B WIND_NON_ZERO
and
.BR WIND_EVEN_ODD .
.TP
.B hasZorder
This is an iterative directive containing a single iteration. When
present, one may use the
.B zorder
directive, whose value is a long integer.
.TP
.BR pindex
The value is "1" for the initial
.B MOVE_TO
operation for a path and is incremented for each control point, spline
point, or end-of-segment point, along the path, and for a
final 'close' if there is one.
.TP
.B pathItem
This is an iterative directive listing points/operations along a path.
The entries have a
.B type directive associated with them, in addition to some other
directives.
.PP
Within a
.B pathItem
directive, the following directives can be used:
.TP
.BR type
This is the type of a control point or operation
along the path (\fBMOVE_TO\fR,
.BR SPLINE ,
.BR CONTROL ,
.BR SEG_END ,
or
.BR CLOSE ).
.TP
.BR ltype
This is similar to the
.B type
directive, but substitutes
.B CONTROL_POINT
for
.BR CONTROL , and
.B SPLINE_POINT
for
.BR SPLINE .
The directive
.B ltype is useful
for templates used to configure an instance of the class
.BR org.bzdev.anim2d.AnimationLayer2DFactory .
.TP
.BR atype
This is is similar to
.B type
but with an alternative value defined by the user via a command-line
argument that provides the name of a file mapping types to their
replacement strings. The format of this file is described below. It
is useful for printing a representation of a table that will be used
in a report where terminology used for software is not appropriate.
.BR xy .
This is an iterative directive, with 0 or 1
iterations. It defines the following directives, the same ones
as defined by the location directive, when the type
is
.BR MOVE_TO ,
.BR SPLINE ,
.BR CONTROL ,
or
.BR SEG_END :
.BR x ,
.BR y ,
.BR xp ,
.BR yp ,
and
.BR ypj ,
with the same meaning as used in  the
.B location
directive.
.TP
.B hasParameterInfo
This is an iterative directive with 0 or 1 iterations.It will be
define when the
.B type
directive has the value
.BR MOVE_TO ,
.BR SPLINE ,
.BR SEG_END ,
or
.BR CLOSE .
.PP
The
.B hasParameterInfo
directive defines
.TP
.B subpathvar
This directive will be defined when a path has subpaths.
.TP
.B hasSubpath
This is an iterative directive with 0 or 1 iterations. It will have
a single iteration when the
.B subpathvar
directive is defined.
.TP
.B u
This directive gives the value of the path parameter for a subpath, or the
path itself if there is no subpath. It will be a real number with
non-negative integer values ( 0.0, 1.0, 2.0, etc.)
.TP
.B s
This directive gives the value of the distance along a subpath, or the
path itself if it does not have subpaths, corresponding to the path
parameter.  The distance for a path parameter of 0.0 is always 0.0.
.SH PATH-ITERATOR TEMPLATE FORMAT
These templates describe individual paths.
The global directives are
.TP
.BR area
This directive contains the area of the shape. If constructed
from multiple paths, all of these paths must be closed paths: otherwise
the value will be "NaN". The units are either user-space units or GCS
units, depending on flags passed to
.BR epts .
When the
.BR epts
command contains the
.B \-\-gcs
option, GCS units are used; otherwise user-space units are used.
.TP
.BR circumference
This directive contains the circumference of the shape. If constructed
from multiple paths, all of these paths must be closed paths: otherwise
the value will be "NaN". The units are either user-space units or GCS
units, depending on flags passed to
.BR epts .
When the
.BR epts
command contains the
.B \-\-gcs
option, GCS units are used; otherwise user-space units are used.

.TP
.B pathLength
This directive contains the path length for the boundary of a shape
regardless of whether it encloses an area. The units are either
user-space units or GCS units, depending on flags passed to
.BR epts .
When the
.BR epts
command contains the
.B \-\-gcs
option, GCS units are used; otherwise user-space units are used.
.TP
.B varname
This directive provides the name of the variable whose value is
the path that the following directives describe.
.TP
.BR windingRule
This directive describes a winding rule, and is useful when a path
is closed, possibly containing multiple disjoint sections. The value
for this director is either
.B WIND_EVEN_ODD
or
.BR WIND_NON_ZERO .
.B WIND_EVEN_ODD
indicates that a point is inside a closed path if a ray drawn to infinity
crosses path segments an odd number of times.
.B WIND_NON_ZERO
indicates that a point is inside a closed path if a ray drawn to infinity
crosses segments drawn in the counterclockwise direction a different
number of times than segments drawn in the clockwise direction.
.TP
.B segments
This directive is an iterative directive.
.PP
The
.B segments
directive iterates over a list of keymaps, each of which contains
the following directives, all but one which are optional:
.TP
.B type
This is a mandatory directive. Its value can be
.BR SEG_CLOSE ,
.BR SEG_MOVETO ,
.BR SEG_LINETO ,
.BR SEG_QUADTO ,
or
.BR SEG_CUBICTO .
For each value, there is a corresponding iterative directive described
below.
.TP
.B method
This is a mandatory directive. Its value can be
.BR closePath ,
.BR moveTo ,
.BR lineTo ,
.BR quadTo ,
.BR curveTo .
These values correspond to the values provided for the
.B type
directive, but provide Java method names used by the
.B Path
class rather than constants provided by the class
.BR PathIterator .
.TP
.B hasClose
This is an iterative directive indicating that the type for the
current segment is
.B SEG_CLOSE .
.TP
.B hasMoveTo
This is an iterative directive indicating that the type for the
current segment is
.B SEG_MOVETO .
.TP
.B hasLineTo
This is an iterative directive indicating that the type for the
current segment is
.B SEG_LINETO .
.TP
.B hasQuadTo
This is an iterative directive indicating that the type for the
current segment is
.B SEG_QUADTO .
.TP
.B hasCubicTo
This is an iterative directive indicating that the type for the
current segment is
.B SEG_CUBICTO .
.PP
Each segment directive also contains the following optional
directives that provide the X and Y coordinates of a segment's
points:
.TP
.B x0
The X coordinate of the first control point. When the type
is
.BR SEG_MOVETO ,
this value represents the X coordinate of the start of a segment.
When the type is
.BR SEG_CLOSE ,
this value is not included in the key map and will therefore be
treated as zero-length text.  When the type is
.BR SEG_LINETO ,
this value represents the X coordinate at the end of the segment.
.TP
.B y0
The Y coordinate of the first control point. When the type
is
.BR SEG_MOVETO ,
this value represents the Y coordinate of the start of a segment.
When the type is
.BR SEG_CLOSE ,
this value is not included in the key map and will therefore be
treated as zero-length text. When the type is
.BR SEG_LINETO ,
this value represents the Y coordinate at the end of the segment.
.TP
.B x1
The X coordinate of the second control point. When the type is
.BR SEG_QUADTO ,
this value represents the X coordinate at the end of the segment.
It is empty when the type is
.B SEG_LINETO
or
.BR SEG_CLOSE .
.TP
.B y1
The Y coordinate of the second control point. When the type is
.BR SEG_QUADTO ,
this value represents the Y coordinate at the end of the segment.
It is empty when the type is
.B SEG_LINETO
or
.BR SEG_CLOSE .
.B x2
The X coordinate of the third control point. When the type is
.BR SEG_CUBICTO ,
this value represents the X coordinate at the end of the segment.
Otherwise, it is empty.
.TP
.B y2
The Y coordinate of the third control point. When the type is
.BR SEG_CUBICTO ,
this value represents the Y coordinate at the end of the segment.
Otherwise, it is empty.
.PP
There are several directives that indicate when
.BR x0 ,
.BR y0 ,
.BR x1 ,
.BR y1 ,
.BR x2 ,
or
.BR y2
exist and can be used as an alternative to the directives
.BR hasMoveTo ,
.BR hasLineTo ,
.BR hasQuadTo ,
.BR hasCubicTo .
These directives are the following:
.TP
.B has0
This is an iterative directive indicating that
.B x0
and
.B y0
exist.
.TP
.B has1
This is an iterative directive indicating that
.BR x0 ,
.BR y0 ,
.B x1
and
.B y1
exist.
.TP
.B has2
.BR x0 ,
.BR y0 ,
.BR x1 ,
.BR y1 ,
.B x2
and
.B y2
exist.
.SH MAP FILES
The
.B epts
command has an option
.B \-\-map
that specifies the strings for the "$(atype)" directive described above.
This argument takes a file name or URL as its argument. The file must
use UTF-8 as its character set. The format is trivial: a series of
lines.  Each line starts with one of the tokens provided by "$(type)":
.BR MOVE_TO ,
.BR SPLINE ,
.BR CONTROL ,
.BR SEG_END ,
or
.BR CLOSE .
This is separated from its replacement by whitespace.  Leading or
trailing whitespace is removed.
.SH SESSION-CONFIGURATION FILES
A session-configuration file is an EPTS-specific file used to
save and restore a previous EPTS session's configuration and
represent a series of command-line options.  As such, a
session-configuration file is not particularly useful for other
applications. These files can be generated by EPTS.
.PP
Session-configuration files are Zip archives that start with
the following byte sequence.
.TP
.BR Bytes\ 0\ to\ 3 :
50 4B 03 04
.TP
.BR Bytes\ 8\ to\ 9 :
00 00
.TP
.BR Bytes\ 14\ to\ 25 :
.TP
00 00 00 00 00 00 00 00 00 00 00 00
.TP
.BR Bytes\ 26\ to\ 27 :
09 00
.TP
.BR Bytes\ 28\ to\ 29 :
29 00
.TP
.BR Bytes\ 30\ to\ 38 :
4d 45 54 41 2d 49 4e 46 2f
.TP
.BR Bytes\ 39\ to\ 40 :
ce  fa
.TP
.BR Bytes\ 41\ to\ 42 :
25 00 (the 16-bit unsigned integer 37 in little-endian byte order)
.TP
.BR Bytes\ 43\ to\ 20 :
61 70 70 6c 69 63 61 74 69 6f 6e 2f 76 6e 64 2e 62 7a 64 65 76
2e 65 70 74 73 2d 63 6f  6e 66 69 67 2b 7a 69 70 (the unterminated
ASCII string "application/vnd.bzdev.epts-config+zip")
.PP
The remainder of the ZIP file includes the following ZIP
entries:
.TP
.BR inputfile .
The ZIP-file entry <CODE>inputfile</CODE> contains an XML-encoded
.B String
providing a file name.
.TP
.BR animation .
The ZIP-file entry <CODE>animation</CODE> contains an XML-encoded
.B String
giving the name of the scripting-language variable whose value will be
an instance of
.B org.bzdev.anim2d.Animation
after scripts are run.
.TP
.BR scriptingLang .
The ZIP-file entry
.B scriptingLang
contains an XML-encoded
.B String
providing the name of the scripting language in use, with the name
.B (DEFAULT)
used to indicate the default language.
.TP
.BR joptions .
The ZIP-file entry
.B joptions
contains an XML-encoded object that is equal to the value returned by
the
.B getDataVector
method of
.B DefaultTableModel
for a table containing options for the command
.BR java .
.TP
.BR codebase .
The ZIP-file entry
.B codebase
contains an XML-encoded object that is equal to the value returned by
the
.B getDataVector
method of
.B DefaultTableModel
for a table containing additional codebases.
.TP
.BR scripts .
The ZIP-file entry
.B scripts
contains an XML-encoded object that is equal to the value returned by
the
.B getDataVector
method of
.B DefaultTableModel
for a table containing the path names or URLS for scripts that should
be executed.
.TP
.BR variables .
The ZIP-file entry
.B variables
contains an XML-encoded object that is equal to the value returned by
the
.B getDataVector
method of
.B DefaultTableModel
for a table specifying variables and their values.  Each row of this
table consists of four columns: the first column provides the
variables\' names; the second column provides the variables\' types; the
third column provides the variables\' values; the fourth column
provides the variables\' units which are meaningful for real-valued
variables and not other types.
.PP
The second and fourth columns\' values are encoded as integers
providing the index the instances of JComboBox used to edit their
values.
.SH TEMPLATE-PROCESSING FILES
A template-processing file can be generated by EPTS and its contents
represent various sequences of command-line options. As such, a
template-processing file is not particularly useful for other
applications.  These files can be generated by EPTS.
.PP
Template-processing files are Zip archives that start with
the following byte sequence.
.TP
.BR Bytes\ 0\ to\ 3 :
50 4B 03 04
.TP
.BR Bytes\ 8\ to\ 9 :
00 00
.TP
.BR Bytes\ 14\ to\ 25 :
.TP
00 00 00 00 00 00 00 00 00 00 00 00
.TP
.BR Bytes\ 26\ to\ 27 :
09 00
.TP
.BR Bytes\ 28\ to\ 29 :
32 00
.TP
.BR Bytes\ 30\ to\ 38 :
4d 45 54 41 2d 49 4e 46 2f
.TP
.BR Bytes\ 39\ to\ 40 :
ce  fa
.TP
.BR Bytes\ 41\ to\ 42 :
2e 00 (the 16-bit unsigned integer 43 in little-endian byte order)
.TP
.BR Bytes\ 43\ to\ 20 :
61 70 70 6c 69 63 61 74 69 6f 6e 2f 76  6e 64 2e 62 7a 64 65 76
2e 65 70 74 73 2d 74 65  6d 70 6c 61 74 65 2d 63 6f 6e 66 69 67
2b 7a 69 70
(the unterminated
ASCII string "application/vnd.bzdev.epts-template-config+zip")
.PP
The remainder of the ZIP file includes the following ZIP
entries:
.TP
.BR basicData .
This contains an XML representation of an instance of the class
.BR TemplateSetup.BasicData .
.TP
.BR tdefTable .
This contains an XML representation of an instance of the class
.BR java.util.Vector ,
each element of which is an instance of
.B java.util.Vector with a size of 3 and representing columns of a table for
a specific row.
For each row, the first column contains a
.B String
giving the name of a
.B org.bzdev.util.TemplateProcessor
iterative directive representing a test (this directive contains a
single iteration), the second column contains
.B String
providing a directive name, and the third
column contains a
.B String
providing the directive's value.
.TP
.BR pathmap .
This contains an XML representation of an instance of the class
.BR TemplateSetup.PathMap .
.TP
.BR globalData .
This contains an XML representation of an instance of the class
.BR TemplateSetup.PathMap .
.TP
.BR pathLocMap .
This contains an XML representation of an instance of the class
.BR TemplateSetup.PathLocMap .
.TP
.BR outfile.
This contains an XML representation of a Java
.B String
representing a file name.
.PP
All of these entries are generated by using the class
.BR java.beans.XMLEncoder .
Further details are available in the EPTS manual, which can be obtained
via the EPTS help menu.

.SH SEE ALSO
.BR epts (1)
\"  LocalWords:  EPTS epts xml UTF br DOCTYPE xmlns fIWIDTH fB URI nm
\"  LocalWords:  fIHEIGHT imageURIExists fIVALUE targetList fICDATA
\"  LocalWords:  CDATA subdirectory gcsconfig unitIndex fIIND fIUDIST
\"  LocalWords:  refPointIndex userSpaceDistance gcsDistance xorigin
\"  LocalWords:  fIGCSDIST fIXORIGIN yorigin fIYORIGIN UDIST GCSDIST
\"  LocalWords:  varname fINAME fITYPE xp XP yp YP SEG fR KeyMap TP
\"  LocalWords:  KeyMapList vindex pathStatement pathSegment ypj xy
\"  LocalWords:  pindex fBMOVE ltype atype whitespace EPTS's hasClass
\"  LocalWords:  hasPackage optSpace ypr hasWindingRule windingRule
\"  LocalWords:  NaN GCS gcs pathLength keymaps MOVETO LINETO QUADTO
\"  LocalWords:  CUBICTO closePath moveTo lineTo quadTo curveTo CSS
\"  LocalWords:  PathIterator hasClose hasMoveTo hasLineTo hasQuadTo
\"  LocalWords:  hasCubicTo hasDashIncrement dashIncrement gcsMode lt
\"  LocalWords:  hasDashPattern dashPattern hasDashPhase dashPhase ce
\"  LocalWords:  hasDrawColor drawColor hasFillColor fillColor zorder
\"  LocalWords:  hasGcsMode hasMiterLimit miterLimit miterlimit eptc
\"  LocalWords:  hasStrokeCap strokeCap hasStrokeJoin strokeJoin JVM
\"  LocalWords:  hasStrokeWidth strokeWidth hasAttributes hasZorder
\"  LocalWords:  codebase PCDATA xrefpointGCS yrefpointGCS codebases
\"  LocalWords:  endian unterminated inputfile scriptingLang joptions
\"  LocalWords:  getDataVector DefaultTableModel JComboBox basicData
\"  LocalWords:  TemplateSetup pathmap PathMap globalData tdefTable
\"  LocalWords:  pathLocMap outfile pathItem hasParameterInfo subpath
\"  LocalWords:  subpathvar subpaths hasSubpath classpath SELECTABLE
\"  LocalWords:  DRAWABLE filterRow selectable fIMODE fIVNAME VNAME
