.TH EPTS "1" "May 2018" "epts VERSION" "User Commands"
.SH NAME
epts \- create points and Bezier curves/splines
.SH SYNOPTSIS
.B epts
.br
.B epts
[\fI\,SCROPTION\/\fR]...
.I IFILE
.br
.B epts
[\fI\,SCROPTION\/\fR]...
.B \-\-image
.I IFILE
.br
.B epts
[\fI\,SCROPTION\/\fR]...
.B \-\-image
.I EFILE
.br
.B epts
[\fI\,SCROPTION\/\fR]... [\fB\-\-script \fI VNAME\fR] [\fI\,SOPTION\/\fR]... [\fI\,SFILE\/\fR]...
.br
.B epts
[\fI\,SCROPTION\/\fR]... [\fB\-\-script \fI VNAME\fR] [\fI\,SOPTION\/\fR]... \fIEFILE\fR [\fI\,SFILE\/\fR]...
.br
.B epts
[\fI\,SCROPTION\/\fR]... [\fI\,TOPTION\/\fR]... [\fI\,EFILE\/\fR]
.br
.SH DESCRIPTION
.PP
EPTS (Edit PoinTS) is a special-purpose graphics editor. Its purpose
is to make it easy to take a background, typically an image, overlay a
series of points or curves on top of it, and then scale and/or
translate the positions of the points and curves so that the locations
of the points or control points are expressed in a specific coordinate
system. The points and paths can then be written to an output stream
in a variety of text formats, each specified by a template, for use
by other programs.
.PP
Arguments that are not options can be one of three types of files:
.TP
.IR IFILE .
This file type represents an image file. Its file-name extension must be
one that is recognized by Java for the image-file formats that Java
supports.
.TP
.IR EFILE .
This file represents an EPTS saved state and its file name ends in
the extension "epts". It is an XML file with a specific document type
and XML namespace. Its document is described in the EPTS manual
(available via the "Help" menu) and in the man page
.BR epts (5).
.TP
.IR SFILE .
This file type is a script file.  If files used as non-option
arguments are not EPTS saved-state files and are not images, they are
assumed to be script files.  If the script file ends with an extension
that Java recognizes for a scripting language, the scripting language
will be inferred from the file name.  Otherwise the
.B \-L
option must be used to set the scripting language.
.PP
With no arguments, EPTS will open a dialog box asking for the name of
an image file, an EPTS saved-state file, or a script, which must use the
default animation name
.BR a2d .
The file name selected will be an implicit file-name argument, the
only one provided.  For commands that specify an image file
.I IFILE
explicitly or implicitly, that file will be used as the
background. For commands that specify a script file
.I SFILE
explicitly or implicitly, that script will be run to generate the
background.  For commands that specify an EPTS file
.I EFILE
explicitly or implicitly, the state of a previously saved session will
be restored.  In this case, the current working directory will be set
to the directory containing the file
.IR EFILE .
After
.IR EFILE,
a series of file names
.IR SFILE ,
which represent scripts, can appear. Finally, for commands that specify
only script files, the scripts will be run in the order specified.
The scripts must create an animation that is assigned to a scripting-language
variable as described below.  If the name of this variable is not
.BR a2d ,
the
.B \-\-script
option must be used to indicate the appropriate variable name.
.PP
EPTS makes use of three coordinate systems, one indirectly:
.TP
.BR Java\ user\-space\ coordinates .
This coordinate system is display-centric where distances are in units
of "points" (1/72 inches) and where the positive X direction points
left and the positive Y direction points down. Without any explicit
scaling, the JRE (Java Runtime Environment) will scale images so that
one pixel covers a square that is 1 point by 1 point in size. This may
represent several pixels on a display or output device (e.g., a
high-resolution printer).  User-space coordinates are floating point
numbers.  As a result, if an output device contains 4 pixels for each
1x1 point square, and the image is scaled down by a factor of 2, there
will be no degradation in image quality.
.TP
.BR Image\ space\ coordinates .
In this coordinate system, a unit corresponds to a pixel of an
image. If an image is used directly, one pixel in the image will take
up 1 unit in user space. When scripts are used to create the
background image, however, an image can be scaled and incorporated in
the background image. Image-space coordinates, however, are not used
for any other purposes and can be ignored except when images are being
added to a background by using a script.  The procedure for adding an
image using a script is provided in the BZDev library documentation
for the package <CODE>org.bzdev.anim2d.AnimationLayer2DFactory</CODE>
(the section \fIUSER GUIDES AND API DOCUMENTATION\fR provides
citations to the documentation.
.TP
.BR GCS\ (Graph\ Coordinate\ Space)\ coordinates .
In this coordinated system distances are measured in
application-specific coordinates (e.g., meters) and where the positive
X direction points left and the positive Y direction points up. EPTS
allows distances to be specified in either custom units or meters.  If
custom units are not used, all other units will be converted to
meters.  Graph coordinate space is define by the BZDev class library,
specifically the class
.BR org.bzdev.graphs.Graph .
.PP
Finally, EPTS uses a template processor that makes it relatively easy
to display paths textually in a variety of formats, including
user-defined formats.  Command-line options are used with templates
and make it easy to use EPTS as part of a 'build' environment (e.g.,
Java programs such as ANT or the traditional Unix/Linux use of
Makefiles). A large number of options are specific to templates
and are described below.
.SH OPTIONS
.PP
Most options can grouped into three types.
An option referred to as
.I SOPTION
in the synopsis is an option that is used to configure EPTS to
run one or more scripts that will the background image.  An option
referred to as
.I TOPTION
in the synopsis is an option that is used to configure ETPS for
template processing.
An option referred to as
.I SCROPTION
in the synopsis is an option that is also used by the
.B scrunner
command. Such options can be used to configure the java virtual machine,
to add additional java archives to the class path, to define or change
various system properties, etc.
.PP
The options that do not fit into well-defined categories are:
following:
.TP
.B \-\-
End of options.
.TP
.BI \-\-image\  IFILE
The argument
.I IFILE
is either an image file, a URL for an image file, or a file containing
an EPTS saved state (these end in the extension ".epts").  The image
formats supported are those that Java supports. In practice, the image
file will be a JPEG or PNG file. If the file name is literally "\-",
EPTS will prompt for an image size and will create an image containing
a white background. The
.B \-\-script
option may not be used with this option. When
.I IFILE
is an EPTS saved-state file, any points or paths recorded in the
file will be ignored and only the image will be used.
To show these points and paths, the EPTS
saved-state file must be the first file-name argument (the first
argument after the final option) and the
.B \-\- image options must not be used.
.TP
.BI \-\-port\  PORT
When
.I PORT
is zero (the default) and the user requests to view the manual using
a browser, an embedded web server will be started and a browser window
will be brought up.  The web server will use a system-allocated port
number.  If
.I PORT
is not zero, an embedded web server will be started and configured so
that the file manual.html is available. The URL for this file will be
<http://\fIHOST\fR:\fIPORT\fR/manual.html>, where
.I HOST
is the host name (or IP address) of the system on which EPTS is running.
Valid port numbers range from 1 to 65535 inclusive, although many are
reserved for other purposes or require system privileges.
.TP
.BI \-\-script\  VNAME
The argument
.I VNAME
is the name of a scripting-language variable whose value is an
instance of
.B org.bzdev.anim2d.Animation2D
and that object will be used to create an image. The scripts are used
to configure the object referenced by
.IR VNAME .
The constructor for
.B Animation2D
determines the size of the image. This option requires file-name
arguments following the options. Each of these arguments must be either
a file locally available or a URL for a remote file. In either case,
the file will contain scripts that use the same scripting language,
and all will be executed by the same script-engine instance, sharing
the same bindings. The constructor for an
.B Animation2D
object will determine the size of the image unless the
.B \-\-image
option is also present. The
.B \-\-image
option can not be used with the
.B \-\-script
option unless the argument for the
.B \-\-image
option is an EPTS saved state that contains an image.
.TP
.B \-\-gui
This option indicates that the program might be run without directly
starting the program from a terminal window. The current working
directory will be set to that containing the file specified by the
first non-option argument, provided that the file is an image file or
an EPTS saved state. In addition, error messages (with a couple of
exceptions) will appear in windows rather than being printed to
standard output. This is provided because when a program is started
using a window system, the current working directory is often not the
one containing its argument file and messages to standard output or
standard error might not be visible to the user.
.PP
If neither of the options
.B \-\-image
or
.B \-\-script
are present, the first file-name argument must provide the name
of a file containing a saved state.  By convention, this file should
end with the file-name extension
.B epts
(for example,
.BR saved.epts ).
Additional file-name arguments may provide scripts, but to have
additional arguments, the saved-state file must have used scripts
to create the image that will be displayed. If the saved-state file
contains an image but no scripting data, the
.B \-\-script
option is needed.
.PP
If both the
.B \-\-image
and
.B \-\-script
options are present or if the first file-name argument is an EPTS
saved state, the scripting language variable
.B epts
will have a non null value (this variable is always defined when
EPTS is running scripts). The
.B epts
variable, when non-null, provides several methods:
.B epts.getWidth()
returns the width of the frame,
.B epts.getHeight()
returns the height of the frame,
.B epts.hasDistances()
returns true if user-space and graph-coordinate-space distances are valid
(false otherwise),
.B epts.getUserDist()
returns a distance in user space, and
.B epts.getGCSDist()
returns the corresponding distance in graph coordinate space.
.SH Unit Conversions
.PP
Options that have double-precision arguments can also specify units
by appending their numerical value with a suffix that treats the argument
as a distance that will be converted to meters.  The suffixes are
.TP
.B nm
This suffix is used for distances measured in nanometers.
.TP
.B um
This suffix is used for distances measured in microns.
.TP
.B mm
This suffix is used for distances measured in millimeters.
.TP
.B cm
This suffix is used for distances measured in centimeters.
.TP
.B m
This suffix is used for distances measured in meters (the conversion
factor is 1.0 in this case).
.TP
.B km
This suffix is used for distances measured in kilometers.
.TP
.B in
This suffix is used for distances measured in inches.
.TP
.B ft
This suffix is used for distances measured in feet.
.TP
.B yd
This suffix is used for distances measured in yards.
.TP
.B mi
This suffix is used for distances measured in miles.
.PP
For example,
.br
.br
\fB\ \ \ \ epts\ \-\-double\ spacing=10ft\ saved.epts\ sresource:grid.js\fR
.br
.br
will show a script-generated image specified by saved.epts with its
points and paths, and with a grid whose lines are spaced at 10-foot
intervals in graph coordinate space in between.
.SH Scripting Options
.PP
The options specific to the EPTS command when scripting is used directly
are the following:
.TP
.BI \-\-boolean\  NAME\fB=\fIBVALUE
The argument consists of two parts.
.B NAME
is the name of a scripting-language variable and
.B BVALUE
is a boolean, represented by the value
.B true
or
.BR false ,
that provides the value for that variable.  The variable will be set
before any script is run.
.TP
.BI \-\-double\  NAME\fB=\fIDVALUE
The argument consists of two parts.
.B NAME
is the name of a scripting-language variable and
.B DVALUE
is a real number that provides the corresponding value for that
variable. The variable will be set before any script is run.
.TP
.BI \-\-int\  NAME\fB=\fIIVALUE
The argument consists of two parts.
.B NAME
is the name of a scripting-language variable and
.B iVALUE
is an integer that provides the corresponding value for that
variable. The variable will be set before any script is run.
.TP
.BI \-\-string\  NAME\fB=\fISVALUE
The argument consists of two parts.
.B NAME
is the name of a scripting-language variable and
.B SVALUE
is a string that provides the corresponding value for that
variable. The variable will be set before any script is run.
.PP
The option
.BR \-\-L ,
which sets the scripting language explicitly, is described in
the
.B
SCRUNNER OPTIONS
.R
section.

.SH Template Options
.PP
Template options are used when the points and paths created by
EPTS should be written to a text file in a format determined by
a template. The option
.B \- o
must be present and will provide the name of the output file.
An option indicating the template must also be present: either
.B \-\-template
or
.BR \-\-svg .
The later is a special case that allows SVG (Scaleable Vector Graphics)
files to be created.  There are two types of templates: table templates
and path templates. Table templates are assumed by default. For a path
template, a
.B \-\-pname
option must be present. For table templates, a
.B \-\-tname
option may be present (if missing, all points and paths will be
processed). Templates are described in the manual page
.BR epts (5)
and in the on-line manual available via the
.B epts
Help menu.
.PP
The options that may be specified when templates are used are the
following:
.TP
.BI \-\-class\  CLASSNAME
This option applies when the
.B \-\-tname
option is used, and provides a class name for table templates that
generate Java code (e.g., a single Java class definition). The
argument
.I CLASSNAME
is the simple name for a class.
.TP
.B \-\-elevate
This flag applies when the
.B \-\-pname
option is used and is ignored otherwise. It will increase the
degree of linear and quadratic Bezier-path segments so that
all segments are cubic segments.
.TP
.BI \-\-fill\-color\  COLOR
This option sets the
.B fill
attribute to
.I COLOR
in an SVG path, and sets the
.B fillColor.css
subparameter to
.I COLOR
for table templates.
It applies to a path specified by the next
.B \-\-pname
option or
.B \-\-tname
option. The value of
.I COLOR
can be any color specification accepted by SVG (the same as those
defined by the CSS2 specification). A value of
.B none
indicates that no color is specified and the path will not be filled.
Named colors are listed at
<https://upload.wikimedia.org/wikipedia/commons/2/2b/
.br
SVG_Recognized_color_keyword_names.svg>.
A '#' followed immediately by 6 hexadecimal digits gives the RGB values
(two hexadecimal digits in  that order). One can also express RGB values,
possibly  with an optional alpha component, by the
expression
.B rgb(\fIR\fB,\fIG\fB,\fIB\fB)
or
.B rgb(\fIR\fB,\fIG\fB,\fIB\fB,\fIA\fB)
where
.IR R ,
.IR B ,
.IR G ,
and
.I A
vary from 0 to 255, or 0% to 100%. An HSL (Hue, Saturation, Lightness)
specification can also be used, optionally with an alpha component:
.B hsl(\fIH\fB,\fIS\fB,\fIL\fB)
or
.B hsla(\fIH\fB,\fIS\fB,\fIL\fB,\fIA\fB)
where
.I H
is a real number in the range [0, 360),
.I S
and
.I L
are real numbers (given as a percentage) in the range [0%, 360%],
.I A
is a real number in the range [0,1].
.TP
.BI \-\-flatness\  FLATNESS
This option applies when the
.B \-\-pname
option is used and is ignored otherwise. When
.I FLATNESS
is zero, the
.B \-\-limit
option determines the number of times a segment will be partitioned. Otherwise
control points must deviate from a straight line along each segment
by at most the value of
.IR FLATNESS ,
which must not be a negative number.
.TP
.B \-\-gcs
This flag applies when the
.B \-\-pname
option is used and is ignored otherwise. When set, the coordinates of
the path's control points will be expressed in GCS (Graph Coordinate
Space) units.  Otherwise the control points are given in Java
user-space units, where distances are in points and where the origin
is at the upper-left corner of the image or frame, with the positive X
axis pointing right and the positive Y axis pointing down. In GCS
units, by contrast, the X axis points right, the Y axis points down,
and the scale is user-defined, with the origin placed anywhere on or
off the image or frame as desired.
.TP
.BI \-\-limit\  LIMIT
This flag applies when the
.B \-\-pname
option is used and is ignored otherwise. This parameter limits the
amount of recursion used when paths are split to meet a flatness
criteria. When
.I LIMIT
is zero, paths will not be partitioned.
.TP
.BI \-\-map\  MAPFILE
The file
.I MAPFILE
must contain a series of lines, each starting with the token
.BR MOVE_TO ,
.BR SPLINE ,
.BR CONTROL ,
.BR SEG_END ,
or
.BR CLOSE .
A replacement for the token, separated from the token by whitespace,
continues to the end of the line. Any whitespace surrounding the
replacement is removed. The mapping can be used to print the types
of points along a path using a custom string instead of the defaults,
which are based on enumeration constants. The map will set the value
of a key whose name is
.B atype
(alternate type) as am alternate for the
.B type
key for use by template processors.
.TP
.BI \-o\  OUTFILE
This option specifies the output file for template processing, and
if missing template-processing will not occur. If the value of
.I OUTFILE
is
.B \-
then standard output is used.  Template processing requires that
a template be specified with the
.B \-\-template
option and one may optionally provide a map using the
.B \-\-map
option when the
.B \-\-pname
option is not used. When the
.B \-o
option is used, EPTS operates in batch mode, and its input file should
be an EPTS file (one with the file extension "epts"). EPTS files are
created by EPTS when its "Save" menu item is used.
.TP
.BI \-\-package\  PACKAGENAME
This option applies when the
.B \-\-tname
option is used, and provides a class name for table templates that
generate Java code (e.g., a single Java class definition). The
argument
.I PACKAGENAME
is the fully-qualified class name for a Java package.
.TP
.BI \-\-pname\  PNAME
This option's argument
.I PNAME
provides the name of a variable that names a path.  When this option
is provided, a path-iterator template must be used and the keymap is
the path-iterator keymap, not the table keymap, as described by the
manual page
.BR epts (5)
and by the on-line manual for
.BR epts .
This keymap describes a path as a series of straight-line segments,
quadratic Bezier curves, or cubic Bezier curves. Segments starting or
terminating with a spline point are converted to cubic Bezier curves.
.I PNAME
may consist of an identifier, immediately followed by a ":", in turn
followed by a series of comma-separated path names.  This in effect
creates a path with a new name that is a concatenation of paths specified
in EPTS's table. The main use of this variant is to create shapes that
may have holes in them.  Only one
.B \-\-pname
option may appear. Template options used with the
.B \-\-pname
option are
.BR \-\-elevate ,
.BR \-\-flatness ,
.BR \-\-gcs ,
.BR \-\-limit ,
and
.BR \-\-straight .
.TP
.B \-\-public
This option applies when the
.B \-\-tname
option is used and indicates that any Java class being defined by a
template should be a public class.
.TP
.B \-\-straight
This flag applies when the
.B \-\-pname
option is used and is ignored otherwise. When set, the path will be
flattened and converted to straight-line segments.
.TP
.BI \-\-stroke\-color\  COLOR
This option sets the
.B stroke
for an SVG
attribute to
.I COLOR
in an SVG path, and the
.B drawColor.css
subparameter for table templates.
It applies to a path specified by the next
.B \-\-tname
option after this options appears. The value of
.I COLOR
can be any color specification accepted by SVG (the same as those
defined by the CSS2 specification). A value of
.B none
indicates that no color is specified and the path will not be drawn.
Named colors are listed at
.br
<https://www.w3.org/TR/css-color-3/#svg-color>
.br
A '#' followed immediately by 6 hexadecimal digits gives the RGB values
(two hexadecimal digits in  that order). One can also use the
expression
.B rgb(\fIR\fB,\fIG\fB,\fIB\fB)
or
.B rgba(\fIR\fB,\fIG\fB,\fIB\fB,\fIA\fB)
where
.IR R ,
.IR B ,
.IR G ,
and
.I A
vary from 0 to 255, or 0% to 100%. An HSL (Hue, Saturation, Lightness)
specification can also be used, optionally with an alpha component:
.B hsl(\fIH\fB,\fIS\fB,\fIL\fB)
or
.B hsla(\fIH\fB,\fIS\fB,\fIL\fB,\fIA\fB)
where
.I H
is a real number in the range [0, 360),
.I S
and
.I L
are real numbers (given as a percentage) in the range [0%, 360%],
.I A
is a real number in the range [0,1].
.TP
.BI \-\-stroke-cap\  VALUE
This option is
used for table templates and applies to the path specified by the
following <CODE>
.B \-\-tname
option. Its values can be one of the following:
.BR butt ,
which ends unclosed subpaths and dash segments with no added decoration;
.BR round ,
which ends unclosed subpaths and dash segments with a round decoration
that has a radius equal to half the width of the stroke; and
.BR square ,
which ends unclosed subpaths and dash segments with a square
projection that extends beyond the end of the segment by a distance
equal to half of the stroke width.
.TP
.BI \-\-stroke\-dash\-incr\  VALUE
This
option is used for table templates and applies to the path
specified by the following
.B \-\-tname
option. The argument
.I VALUE
is the length assigned to a "\-</CODE" or "\ " in a dash pattern.
.I VALUE
is specified in graph coordinate space when the option
.B \-\-stroke-gcs-mode is
.BR true ;
otherwise it is specified in user-space or image space units.
.TP
.BI \-\-stroke\-dash\-pattern\  VALUE
A dash pattern specifies how dashes are drawn.
.I VALUE
will be a sequence of minus signs ("\-") and spaces ("\ "),
starting with a "\-". The length of
.I N
"\-" characters in a row or
.I N
spaces in a row is
.I  N
multiplied by the dash increment, and corresponds to
the length of a stroke or gap respectively. The dash pattern will
repeat.
.I VALUE
is specified in graph coordinate space when the option
.B \-\-stroke\-gcs\-mode
is
.BR true ;
otherwise it is specified in user-space or image space units.
.TP
.BI \-\-stroke\-dash\-phase\  VALUE
This option is used for table templates and applies to the path
specified by the following
.B \-\-tname
option.
.I VALUE
is offset to the start of the dash pattern, and is specified in graph
coordinate space when the option
.B \-\-stroke\-gcs\-mode
is
.BR true ;
otherwise it is specified in user-space or image space units.
.TP
.BI \-\-stroke\-gcs\-mode\  BOOLEAN
This option is used for table templates and applies to the path
specified by the following
.B \-\-tname
option. The value
.I BOOLEAN can be
.B true
or
.BR false .
This option sets the
.B stroke.gcsMode
subparameter for table templates, and indicates if stroke dimensions
are in GCS units or user-space units (the default). For GCS units,
the value must be
.BR true .
.TP
.BI \-\-stroke\-join\  VALUE
This option is used for table templates and applies to the path specified
by the following
.B \-\-tname
option. Its values can be one of the following:
.BR bevel</CODE> ,
which joins path segments by connecting the outer corners of their
wide outlines with a straight segment;
.BR miter</CODE> ,
which joins path segments by extending their outside edges until they
meet;
.BR round</CODE> ,
which joins path segments by rounding off the corner at a radius of
half the line width.
.TP
.BI \-\-stroke\-miter\-limit\  VALUE
This
option is used for table templates and applies to the path
specified by the following
.B \-\-tname
option. The miter limit is the limit such that a line join is trimmed
when the ratio of miter length to stroke width is greater than this
value. The miter length is the diagonal length of the miter, which is
the distance between the inside corner and the outside corner of the
intersection. The smaller the angle formed by two line segments, the
longer the miter length and the sharper the angle of intersection. The
default miterlimit value of 10.0 causes all angles less than 11
degrees to be trimmed. Trimming miters converts the decoration of the
line join to a bevel. This value applies only to a line join that has
a
.B miter
join decoration and must be larger than or equal to 1.0.
.I VALUE
is specified in graph coordinate space when the option
.B \-\-stroke-gcs-mode
is
.BR true ;
otherwise it is specified in user-space or image space units.
.TP
.BI \-\-stroke-width\  WIDTH
This option sets the
.B stroke-width
attribute to
.I WIDTH
in an SVG path and the
.B stroke.width
subparameter for table templates.
The value of
.I WIDTH
is a non-negative positive real number that is specified in graph
coordinate space when the option
.B \-\-stroke-gcs-mode
is
.BR true ;
otherwise it is specified in user-space or image-space units.
.TP
.B \-\-svg
This option, if present, must precede all
.B \-\-pname
options.  It indicates that the output will be an SVG (Scaleable
Vector Graphics) file.  The
.BR \-\-template ,
.BR \-\-flatness ,
.BR \-\-straight ,
and/or
.B \-\-elevate
options must not be used with this option. The option
.B \-o
is required, and at least one
.B \-\-pname
option should be present.  The options
.BR \-\-fill\-color ,
.BR \-\-winding\-rule ,
.BR \-\-stroke ,
and
.B \-\-stroke-width
may be used (at least one will typically be provided).
.TP
.BI \-\-template: RESOURCE
This option is a shortcut for the option
.BI \-\-template\ sresource: RESOURCE
as built-in templates are a common case.
.TP
.BI \-\-template\  TFILE
The output will be formated based on a template provided by the
file or URL
.IR TFILE .
The format of the template file depends on whether or not the
.B \-\-pname
flag has been set: when set, a path-iterator template must be used;
otherwise a table template must be used. There are a number of
built-in templates whose URLs start with the protocol
.BR sresource .
For table templates, the pathname component of the URLs (separated
from the protocol by a ":") are
.BR ECMAScriptLayers ,
.BR ECMAScriptLayerPaths ,
.BR EMCAScriptLocations ,
.BR sresource:EMCAScriptPaths ,
.BR ECMAScript ,
.BR JavaLocations,
.BR JavaPathBuilders ,
and
.BR JavaPaths .
For path-iterator templates, the pathname component of the URLs are
.BR area ,
.BR circumference ,
.BR pathlength ,
and
.BR SegmentsCSV .
These templates are described below.
.TP
.BI \-\-tname\  TNAME
This option's argument
.I TNAME
provides the name of a variable that names a path.  When this option
is provided, a table template must be used and the keymap is
the table keymap as described by the
manual page
.BR epts (5)
and by the on-line manual for
.BR epts .
.I TNAME
may be an existing identifier for a path or a location in an EPTS table,
or it may consist of an identifier, immediately followed by a ":", in turn
followed by a series of comma-separated path names.  This in effect
creates a path with a new name that is a concatenation of paths specified
in EPTS's table. Before each
.B \-\-tname
option, there may be a
.B \-\-winding\-rule
option. Multiple
.B \-\-tname
options may be used. If any are present, only the specified portions of
the EPTS table will appear in the output.
.TP
.B \-\-web
This option indicates that a web server will be started and the GUI will
be ignored.  The web server will provide access to the on-line manual.
The
.B \-\-port
option should be used as well and should set the port number to a non-zero
value.
.TP
.BI \-\-winding\-rule\  RULE
This option, when present, adds a winding rule for use with table
templates when the
.B \-\-tname
option is used, and must precede that option. After a
.B \-\-tname
option is seen, the winding rule removed.  The values of
.I RULE
may be
.B evenodd
or
.BR nonzero .
The
.B \-\-fill\-rule
option is a synonym. The
.B \-\-winding\-rule
option sets a template-table keymap directive as described in the
documentation for
.BR epts (5)
and in the on-line manual.
.TP
.BI \-\-zorder\  VALUE
This option, when present, adds a Z-order  for use with table
templates when the
.B \-\-tname
option is used, and must precede that option. After a
.B \-\-tname
option is seen, the value is removed. The value is a long integer.
.SH Scrunner Options
.PP
Some of the options EPTS supports are ones that are shared with the
program
.BR scrunner .
Unless an exceedingly large image file is used or a custom image
format has to be supported, these are generally not needed when the
background is an image.  The
.B scrunner
options that are supported are:
.TP
.BI \-\-codebase\  URLPATH
Defines directories and jar files to a class path.
.I URLPATH
may be a URL giving the location of the classes or a path name in the
local file system.  The character "|" is used as a path separator, with
the sequence "||" interpreted as a literal "|", so that for an odd number
of "|" characters in a row, only the final one is treated as a path separator.
If file name must start with "|", use a "file" URL and encode the "|" as
%7C.
If the starting sequence of a path component contains a ":" (the first one if
there are more than one), and that sequence of characters is syntactically
valid at the start of a URL, the path component is treated as a URL. Otherwise
it is a file name.  This rule implies that Windows file names such as
C:mycode.jar will be confused with a URL, so a URL should be used instead.
If a file name is not absolute, it is interpreted
relative to the current working directory. Multiple codebase options may be
provided (to improve readability).
Multiple
.B \-\-codebase
options are allowed. For file names, a leading "~" followed by the
name separator ("/" for Unix) is expanded to the user\'s home
directory, a file name consisting of only "~" is replaced with the
user\'s home directory, a leading "~~" is replaced with "~", and a
leading "..." followed by the name separator ("/" for Unix) is
replaced by the directory in which the BZDev class library's JAR file
is located. Finally, the substitutions for \'|\', \'~\', and \'...\'
(followed by the file-name separator) apply only to the
.B \-\-codebase
option, not to file-name arguments that appear after the last option.
.TP
.BI \-D NAME\fB=\fIVALUE
Define the name of a Java property and give it a value.  See the java
command for details.  The syntax for this argument is the same as that
defined for the similarly named option for the
.B java
command.  The properties "java.system.class.loader", "java.security.manager",
"scrunner.sysconf", and "scrunner.usrconf" cannot be altered by this
option (or the corresponding
.B \-J
option).  If those must be changed, add a
.B \-D
option before the
.B \-jar
option in the
.B scrunner
shell script (or alternatively, create a new script).
.TP
.B \-\-dryrun
Prints the java command that would be executed but does not actually
execute it.
.BI \-J \-JOPTION
Causes a single-argument option
.I \-JOPTION
to be used by the java launcher that
.B epts
invokes.
.TP
.BI \-L\  LANGUAGE
Specifies the scripting language
.I LANGUAGE
 in use.
.SH BUILT-IN TEMPLATES
.PP
EPTS includes several templates, which can be grouped into two categories:
table templates and path-iterator templates.  A template must be a table
template when the
.B \-\-template
option is used and the
.B \-\-pname
option is not used.  If the
.B \-\-template
option is used and the
.B \-\-pname
is used, the template should be a path-iterator template. If neither
the
.B \-\-tname
option nor the
.B \-\-pname
option are used, the template is assumed to be a table template.
.PP
The table templates are the following:
.TP
.B sresource:ECMAScript
This option will print the
information included in the EPTS table. Each path or location is
represented by an ECMAScript variable. For locations, the value
assigned to the variable is an object whose properties
.B x
and .B y
provide the coordinates of the
point. For paths, if stroke or color options are not used, the
object will be an array of objects, each describing a control
point. In this case, the value assigned to the variable will be
an object that can be used to configure an instance of
.B org.bzdev.geom.SplinePathBuilder</CODE>. When the corresponding
.B \-\-tname
option\'s argument names a single EPTS path,
the array can also be used to configure an instance of
.B org.bzdev.anim2d.AnimationPath2DFactory
or
.B org.bzdev.geom.BasicSplinePathBuilder</CODE>. If a stroke or
color option is provided,
the object will be an array of two objects, where the first object
describes a stroke, color, and Z-order, and where the second
object contains an array of control points describing the path
itself.  Because of the constraints imposed by the class
.B AnimationPath2DFactory
the corresponding
.B \-\-tname
option must name a single EPTS path when a
stroke or color option is provided.
.TP
.B sresource:ECMAScriptLayers
This option will print the information included in the EPTS
table. Each path is represented by an ECMAScript variable. Location
entries are ignored.  For each
.B --tname
option, or
all paths if there are no
.B --tname
options, the
value assigned to each variable will be an array of objects.
The array can be used to configure an instance of
.B org.bzdev.anim2d.AnimationLayer2DFactory</CODE>.
One may use the
.B --tname
option to include only
specific paths and optionally to use a new variable name that
represents a single path or the concatenation of multiple paths.
When a
.B --tname
option is used, a
.B --winding-rule</CODE>
option may be used, as can color or stroke options.
.TP
.B sresource:ECMAScriptLocations
This template provides the same ECMAScript statements that the
.B sresource:ECMAScript
template produces, but only locations are included, not paths.
.TP
.B sresource:ECMAScriptPaths
This template provides the same ECMAScript statements that the
.B sresource:ECMAScript
template produces, but only paths are included, not locations.
.TP
.B sresource:JavaLocations
This template provides a Java class containing fields that are
instances of the Java class
.B java.awt.geom.Path2D
with each field named by the name provided in a
.B \-\-tname
options If there are no
.B \-\-tname
options, the field names are the names of all the locations defined in
the EPTS table.  Multiple
.B \-\-tname
options are allowed.
.TP
.B sresource:JavaPathBuilders
This template provides a Java class containing fields that are
instances of the Java class
.B org.bzdev.geom.SplinePathBuilder
with each field named by the primary name (the name before a colon in the
argument for a
.B \-\-tname
option) provided in a
.B \-\-tname
option for a path. If there are no
.B \-\-tname
options, the field names are the names of all the paths defined in
the EPTS table. Multiple
.B \-\-tname
options are allowed.
.TP
.B sresource:JavaPathFactories
This template provides a Java class containing fields that are
instances of the Java interface
.B org.bzdev.obnaming.NamedObjectFactory.IndexedSetter
with each field named by the name provided by a
.B --tname
option for a path. If there are no
.B --tname
options, the field names are the names of all the paths defined in the
EPTS table.  The arguments to the
.B --tname
options must be simple names that match the names of paths defined in
the EPTS table. For a specific
.B --tname
option, color or stroke options can be specified (these must precede
the
.B --tname
option to which they apply).
.PP
The path-iterator templates are the following:
.TP
.B sresource:area
This template requires the use of a
.B \-\-pname
option to specify a path name, or to create a new path that is the
concatenation of several existing paths.  It provides the area
enclosed by the path; "NaN" if the path contains any open segments. If
the command was run with the
.B \-\-gcs
option, the units are graph-coordinate-space units; otherwise they are
user-space units.
.TP
.B sresource:circumference
This template requires the use of a
.B \-\-pname
option to specify a path name, or to create a new path that is the
concatenation of several existing paths.  It provides the
circumference of the area enclosed by the path; "NaN" if the path
contains any open segments. If the command was run with the
.B \-\-gcs
option, the units are graph-coordinate-space units; otherwise they are
user-space units.
.TP
.B sresource:pathlength
This template requires the use of a
.B \-\-pname
option to specify a path name, or to create a new path that is the
concatenation of several existing paths.  It provides the
path length, summed over all segments making up the path. If the command was run with the
.B \-\-gcs
option, the units are graph-coordinate-space units; otherwise they are
user-space units.
.TP
.B sresource:SegmentsCSV
This template requires the use of a
.B \-\-pname
option to specify a path name, or to create a new path that is the
concatenation of several existing paths.  The template will create its
out in CSV (Comma Separated Values) format, describing the specified
path. The name of the path will not appear in the output.
The CSV values contain 7 columns, some of which may be empty.
The first is
.BR type ,
whose value can be
.BR SEG_CLOSE ,
.BR SEG_CUBICTO ,
.BR SEG_LINETO ,
.BR SEG_MOVETO ,
or
.BR SEG_QUADTO ,
matching names defined by the class
.BR java.awt.geom.PathIterator .
The remaining values are
.BR x0 ,
.BR y0 ,
.BR x1 ,
.BR y1 ,
.BR x2 ,
and
.BR y2 .
The values for these are numbers or empty strings.
.SH SCRIPTING
Scripts created for EPTS are compatible with those used by the command
.B scrunner
when the Java package
.B org.bzdev.anim2d
is used. Some scripts require additional code bases to run, in
which case the
.B \-\-codebase
option will be needed. A copy of URLs indicating the codebase
locations are kept in saved-state file when scripts are used
to create the background image and the session is subsequently
saved. Basically a user will create an animation and a series of
animation objects, but will not actually run the animation.
Initially, two variables are defined. The first is named
.B scripting
and contains a scripting
context (the use of this is described in the BZDev class library
and
.B scrunner
documentation.) The second is the variable
.BR epts ,
which is defined when EPTS is running. The
.B \-\-script
option, when present, sets the name of the
scripting-language variable referring to the animation, with a default
variable name of "\fBa2d\fR". When a new script is run,
EPTS checks if the animation was created and if it is, EPTS will
set the variable
.B a2d
to refer to this animation (this
is done so because built-in scripts described below assume the
animation is named "\fBa2d\fR".
.PP
When image sizes are known and scripts are being run, the
scripting-language variable
.B epts
will have a non-null value and will provide several methods:
.TP
.B epts.getWidth()
to determine the frame width in user-space units.
.TP
.B epts.getHeight()
to determine the frame height in user-space units.
.TP
.B epts.hasDistances()
to determine if user-space and graph-coordinate-space distances are
valid (true if valid, false if not).
.TP
.B epts.getUserDist()
to determine a user-space distance.
.TP
.B epts.getGCSDist()
to determine a corresponding graph-coordinate-space distance.
.TP
.B epts.getRefPointName()
to determine location of the reference point (the value is an
enumeration constant defined by
.BR org.bzdev.graphs.RefPointName .
.TP
.B epts.getXOrigin()
to determine the X value in graph coordinate space for the reference
point.
.TP
.B epts.getYOrigin()
to determine the Y value in graph coordinate space for the reference
point.
.TP
.B epts.getXFract()
to determine the fractional distance from the left edge of a graph's
range to its right edge. The values returned can be either 0.0, 0.5,
or 1.0 and match the RefPointName enumeration.
.TP
.B epts.getYFract()
to determine the fractional distance from the lower edge of a graph's
range to its upper edge. The values returned can be either 0.0, 0.5,
or 1.0 and match the RefPointName enumeration.
.PP
These methods should be used to configure the width and height of an
animation's frame. For example,\fB
.br
.br
\ \ \ \ \ \ if (typeof epts === 'undefined' || epts == null) {
.br
\ \ \ \ \ \ \ \ \ \ var frameWidth = 1024;
.br
\ \ \ \ \ \ \ \ \ \ var frameHeight = 1024;
.br
\ \ \ \ \ \ } else {
.br
\ \ \ \ \ \ \ \ \ \ var frameWidth = epts.getWidth();
.br
\ \ \ \ \ \ \ \ \ \ var frameHeight = epts.getHeight();
.br
\ \ \ \ \ \ }
.br
\ \ \ \ \ \ var a2d = new Animation2D(scripting, frameWidth, frameHeight);
.br
.br
\fRWhen there is no image, the variable
.B epts
will still be
defined, but its value will be null (when defined, that is an indication
that the script is being run by EPTS).  While the
<A href="#config">Configure CGS</A> menu item will not be disabled
when there is no image, the fields shown in its dialog box will not
be editable.
<P>
After an animation is created, one will typically create animation
factories and use these factories to create animation objects that
can be displayed.  In particular, animation layers can be used to
draw simple geometrical figures, figures based on paths, and can
scale and place images. The normal sequence of calling the animation's
methods
.BR initFrames ,
.B scheduleFrames
and
.B run
are skipped: EPTS will iterate through the animation's
objects using their Z-order and write them to a graph, thereby creating
a background.
<P>
To use EPTS in developing animations, one can use templates to
create ECMAScript code that will provide paths or in some cases
shapes. There will be a series of files that can then be
used by
.BR scrunner .
Programs such as
.B make
that track file dependencies can be used to run EPTS with template
options.

.SH Built-in Scripts
.PP
There are two built-in scripts accessible using the
.B sresource
protocol:
.TP
.B sresource:grid.js
This script overlays a rectilinear grid as a representation of a
Cartesian coordinates.
.TP
.B sresource:polar.js
This script overlays a polar grid as a representation of polar
coordinates.
.PP
While there is a default behavior in both cases, the grids can be tuned
if necessary.  These scripts must be used with the option
.B \-\-script\ a2d
as the variable representing an animation is
.B a2d
in both cases. If another script assigns a value to
.BR a2d ,
the scripts describe below will not override that value. They will,
however, set the value of
.B a2d
if it is null or undefined.
.PP
The grids the scripts display can be controlled by setting various
EMCAScript variables. This is done using the CLI options
.BR \-\-boolean ,
.BR \-\-double ,
.BR \-\-int ,
and
.B \-\-string
to set variable names to values as described above.
.PP
Some variables are shared by both
.B sresource:grid.js
and
.BR sresource:polar.js :
.TP
.B frameWidth
The value is an integer giving the width of the background image that
will be created. The default is 1920. The value is ignored if the
animation was created by another script.
.TP
.B frameHeight
The value is an integer giving the height of the background image that
will be created. The default is 1080. The value is ignored if the
animation was created by another script.
.TP
.B userdist
The value is a double giving a reference distance in user space. The
default is 1.0. The ratio userdist/gcsdist is the scaling factor for
converting distances in graph coordinate space to user space. The
value is ignored if the animation was created by another script.
.TP
.B gcsdist
The value is a double giving a reference distance in graph coordinate
space. The default is 1.0. The ratio userdist/gcsdist is the scaling
factor for converting distances in graph coordinate space to user
space. The value is ignored if the animation was created by another
script.
.TP
.B xorigin
The value is a double giving the X coordinate in graph coordinate
space for the frame's reference point. The default is 0.0.  The value
is ignored if the animation was created by another script.
.TP
.B yorigin
The value is a double giving the Y coordinate in graph coordinate
space for the frame's reference point. The default is 0.0.  The value
is ignored if the animation was created by another script.
.TP
.B xfract
The value is a double giving the fraction of the frame width at which
the reference point appears (0.0 is the left edge and 1.0 is the right
edge). The default is 0.0. The value is ignored if the animation was
created by another script.
.TP
.B yfract
The value is a double giving the fraction of the frame height at which
the reference point appears (0.0 is the lower edge and 1.0 is the
upper edge). The default is 0.0. The value is ignored if the animation
was created by another script.
.TP
.B strokeWidth
The value is a double giving the width of the stroke used to create
grid lines; undefined or null for a default.
.TP
.B gridZorder
The value is an integer giving the z-order to use for the object that
creates the grid. The default is the JavaScript value
java.lang.Long.MAX_VALUE (2<SUP>53</SUP> - 1).
.PP
The script
.B sresource:grid.js
will overlay an image with a Cartesian (rectilinear) grid consisting
of parallel, evenly spaced lines in both the X and Y directions.  The
variables specific to
.B sresource:grid.js
that configure Cartesian grids are the following:
.TP
.B spacing
The value is a double giving the grid spacing in graph-coordinate
space units. If not provided explicitly or if the value is null, 0.0,
or negative, the default is computed by taking the minimum of the
frame width and frame height, converting that minimum to graph
coordinate space units, then dividing by 10, and finally finding the
largest power of 10 that is not larger than this value. The grid lines
will appear at X or Y coordinates that are an integral multiple of the
spacing.
.TP
.B subspacing
The value is the number of subspacings per spacing for a finer grid.
if undefined or 1, the value is ignored. In practice, values that
create a subgrid are either 2, 4, 5, or 10.  The value must be an
integer.
.TP
.B axisColor
The value is the axis color provided as a CSS string, null or
undefined for the default.
.TP
.B spacingColor
The value is the spacing color provided as a CSS string, null or
undefined for the default.
.TP
.B subspacingColor
The value is the subspacing color provided as a CSS string, null or
undefined for the default.
.PP
The script
.B sresource:polar.js
will overlay an image with a polar grid. These grids consist of a set
of evenly spaced circles centered at a common origin, and radial lines
with the same angular spacing, excluding areas near the origin where
some lines may be eliminated in order to prevent them from running
together.  The variables specific to
.B sresource:polar.js
that configure polar grids are the following:
.TP
.B fractional
The value is true if the grid origin's coordinates (gridXOrigin,
gridYOrigin) are a fraction of the position in the frame (excluding
offsets); false if absolute values in graph coordinate space are
used. If undefined or null, a default will be used.
.TP
.B gridXOrigin
The value is a double giving the X component of the grid's origin.
When fractional is true, the value is a fraction of the position in
the frame, excluding offsets, in the X direction. When false, it is
the X coordinate of the origin for a polar coordinate grid, given in
graph-coordinate-space units. If undefined or null, a default value
will be used.
.TP
.B gridXOrigin
The value is a double giving the Y component of the grid's origin.
When fractional is true, the value is a fraction of the position in
the frame, excluding offsets, in the Y direction. When false, it is
the Y coordinate of the origin for a polar coordinate grid, given in
graph-coordinate-space units. If undefined or null, a default value
will be used.
.TP
.B radialSpacing
The value is a double giving the radial spacing for concentric
circles; null, undefined, 0.0 or negative for a default.
.TP
.B angularSpacing
The value is the angular spacing in degrees for radial lines.  The
value should be a divisor of 90 degrees or either null or undefined
for a default.
.TP
.B gridColor
The value is the grid-line color provided as a CSS string, undefined
or null for the default.
.SH EXAMPLES
.PP
The following are examples of how to run EPTS using the command-line
interface:
.TP
.B epts\ saved.epts
Start EPTS, restoring its state to one saved in a previous session.
.TP
.B epts\ \-\-double\ spacing=10ft\ saved.epts\ sresource:grid.js
Start EPTS, restoring its state to one saved in a previous session.
The saved state uses a script to create the image and an additional
build-in script (grid.js) is used to add a grid overlaying that image
but not overlaying points or paths. The grid spacing corresponds to
10 feet in graph coordinate space.
.TP
.B epts\ \-\-script a2d\ \-\-double\ spacing=10ft\ saved.epts\ sresource:grid.js
Start EPTS, restoring its state to one saved in a previous session.
The saved state specifies an image and an additional build-in script
(grid.js) is used to add a grid overlaying that image but not
overlaying points or paths. Because the saved state does not use
scripts, a
.B \-\-script
option is needed to indicate the name to use to create the animation
that will generate the grid. The grid spacing corresponds to
10 feet in graph coordinate space.
.TP
.B epts\ \-\-codebase\ foo.jar\ saved.epts
Start EPTS, restoring its state to one saved in a previous session,
adding a jar file
.B foo.jar
to EPTS's code base.
.TP
.B epts\ \-\-image\ image.png
Start EPTS with an image preloaded as its
background.
.TP
.B epts\ \-\-script\ a2d\ commands.js
Start EPTS and run the script provided in commands.js to generate
an image from an animation
.B a2d
(an instance of
.BR org.bzdev.anim2d.Animation2D ).
.TP
.B
epts\ \-\-codebase\ foo.jar\ \-\-script\ a2d\ commands.js
Start EPTS and run the script provided in commands.js to generate
an image from an animation
.B a2d
(an instance of
.BR org.bzdev.anim2d.Animation2D ).
The file foo.jar contains
additional classes needed by the script. The
.B \-\-codebase
option
will be needed when restarting EPTS using a saved state
created when this command is being run.
.TP
.B epts\ \-o\ out.js\ \-\-template:ECMAScript\ saved.epts
Run EPTS without a GUI to generate a file
.B out.js
containing
a series of ECMAScript statements containing the contents
of the EPTS table.
.TP
.B epts\ \-o\ out.svg\ \-\-svg\ \-\-fill red\ \-\-pname s:c1,c2\ saved.epts
Run EPTS without a GUI to generate an SVG file
.B out.svg
containing a shape
.B s
consisting of two curves
.B \fIR(\fBc1
and
.BR c2 )
defined in the EPTS table.  The table is the one defined by the file
.B saved.epts
.TP
.B epts\ \-o\ \-\ \-\-gcs\ \-\-template:area\ \-\-pname s:c1,c2
Run EPTS without a GUI to compute the area of a shape bounded by the
curves
.B c1
and
.B c2.
The area is in GCS units.
.SH USER GUIDES AND API DOCUMENTATION
.TP
.B /usr/share/doc/libbzdev-doc/api/index.html
The web page for the API documentation for the BZDev class library.
.TP
.B /usr/share/doc/libbzdev-doc/factories-api/index.html
The web page for the BZDev class library's factories and their
parameters. This is usually sufficient for determining how to to
configure a factory.
.TP
.B /usr/share/doc/libbzdev-doc/ByExample.pdf
This is a copy of \fIAn Introduction to the BZDev Java Class Library
with Examples\fR.
.TP
.B /usr/share/doc/libbzdev-doc/SimScript.pdf
This is a copy of \fISimulation Scripting Guide for the BZDev class library\fR.
It describes how to create factories.
.TP
.B /usr/share/doc/libbzdev-doc/Factories.pdf
This is a copy of \fIProgramming Named-Objects and their Factories\fR. This
guide concentrates on how to create new objects and their factories.
.SH FILES
.TP
.B /etc/bzdev/scrunner.conf\ \fRor\fB\ /etc/opt/bzdev/scrunner.conf
System configuration file that allows a specific Java launcher, class-path
entries, and property definitions to be used. The form starting with
/etc/opt may be used on some systems (e.g. Solaris).
.TP
.B ~/.config/bzdev/scrunner.conf
User configuration file that allows a specific Java launcher, class-path
entries, and property definitions to be used.  property definitions in this
file override those in the system configuration file.
.SH SEE ALSO
.BR scrunner (1)
.br
.BR scrunner.conf (5)
.br
.BR epts (5)
\"  LocalWords:  EPTS epts Bezier SYNOPTSIS fI SCROPTION fR EFILE br
\"  LocalWords:  IFILE PoinTS scrunner TP html MAPFILE SEG whitespace
\"  LocalWords:  atype TFILE formated OUTFILE codebase URLPATH fB SVG
\"  LocalWords:  fIVALUE sysconf usrconf dryrun JOPTION fRor Solaris
\"  LocalWords:  config conf VNAME SOPTION SFILE TOPTION ETPS DVALUE
\"  LocalWords:  fIDVALUE fIIVALUE iVALUE fISVALUE SVALUE pname CSS
\"  LocalWords:  RGB rgb fIR fIG fIB rull evenodd svg gcs keymap NaN
\"  LocalWords:  EPTS's fillRule Scaleable sresource ECMAScriptLayers
\"  LocalWords:  ECMAScriptLayerPaths EMCAScriptLocations pathlength
\"  LocalWords:  EMCAScriptPaths SegmentsCSV tname TNAME windingRule
\"  LocalWords:  BZDev ECMAScriptLocations ECMAScriptPaths CSV LINETO
\"  LocalWords:  CUBICTO MOVETO QUADTO png preloaded js fBc CLASSNAME
\"  LocalWords:  PACKAGENAME JavaLocations JavaPaths fillColor css nm
\"  LocalWords:  subparameter fIA HSL hsl fIH fIS fIL hsla drawColor
\"  LocalWords:  rgba unclosed subpaths incr gcsMode miterlimit CLI
\"  LocalWords:  pathname JavaPathBuilders zorder AnimationPath JRE
\"  LocalWords:  DFactory JavaPathFactories fBepts fIEFILE fIVNAME
\"  LocalWords:  boolean fIBVALUE BVALUE getWidth getHeight userdist
\"  LocalWords:  hasDistances getUserDist getGCSDist nanometers gui
\"  LocalWords:  EMCAScript frameWidth frameHeight gcsdist xorigin
\"  LocalWords:  yorigin xfract yfract strokeWidth gridZorder subgrid
\"  LocalWords:  subspacing subspacings axisColor spacingColor fIUSER
\"  LocalWords:  subspacingColor gridXOrigin gridYOrigin gridColor
\"  LocalWords:  radialSpacing angularSpacing namespace centric fBa
\"  LocalWords:  Runtime Makefiles getRefPointName getXOrigin typeof
\"  LocalWords:  getYOrigin getXFract RefPointName getYFract fRWhen
\"  LocalWords:  href CGS initFrames scheduleFrames fIAn fISimulation
\"  LocalWords:  fIProgramming
